name: Test and Bundle website

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build website
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache Docusaurus outputs
      uses: actions/cache@v3
      with:
        path: .docusaurus
        key: docusaurus-${{ github.ref }}
        restore-keys: |
          docusaurus-

    - name: Install NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Clean install dependencies
      run: npm ci

    - name: Test application
      run: npm run test

    - name: Build application
      run: npm run build

    - name: Create gzip-compressed files
      run: find build -type f -exec gzip -9 -k \{\} \;

    # Currently disabled: server cannot statically serve brotli files
    # - name: Create brotli-compressed files
    #   continue-on-error: true
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install brotli
    #     find build -type f -exec brotli -Z -k \{\} \;

    - name: Upload built website
      uses: actions/upload-artifact@v3
      with:
        name: website
        path: build/
        if-no-files-found: error

  deploy-acceptance:
    name: Deploy to acceptance
    needs:
      - build

    if: github.event_name == 'push'

    uses: gumbo-millennium/thunderstruck/.github/workflows/deploy-application.yml@main
    with:
      environment: acceptance
    secrets:
      deploy_host: ${{ secrets.DEPLOY_HOST }}
      deploy_path: ${{ secrets.DEPLOY_PATH }}
      deploy_port: ${{ secrets.DEPLOY_PORT }}
      deploy_ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
      deploy_user: ${{ secrets.DEPLOY_USER }}

  deploy-production:
    name: Deploy to production
    needs:
      - build
      - deploy-acceptance

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    uses: gumbo-millennium/thunderstruck/.github/workflows/deploy-application.yml@main
    with:
      environment: production
    secrets:
      deploy_host: ${{ secrets.DEPLOY_HOST }}
      deploy_path: ${{ secrets.DEPLOY_PATH }}
      deploy_port: ${{ secrets.DEPLOY_PORT }}
      deploy_ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
      deploy_user: ${{ secrets.DEPLOY_USER }}
